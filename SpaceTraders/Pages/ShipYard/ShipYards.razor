@page "/ShipYard/{WaypointString}"
@using SpaceTraders.Pages.Location
@inject ShipYardApiService ShipYardApiService;

@if (WaypointString is not null)
{
    <MudDataGrid T="ShipType" Items="@Ships" SortMode="SortMode.Multiple" Filterable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">ShipYard: @ShipYardDetails.Symbol.ToString()</MudText>
            <MudSpacer/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn T="ShipType" TProperty="string" Property="ship => ship.Type.ToString()" Title="Ship Types"/>
            <TemplateColumn T="ShipType" CellClass="d-flex" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="Size.Small" Variant="@Variant.Filled" Color="Color.Primary"
                                   @onclick="(() => BuyShip(context.Item))">
                            Buy
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
else
{
    <div>Empty waypoint was received</div>
}

@code {
    [Parameter]
    public string? WaypointString { get; set; }
    
    private Location Waypoint { get; set; }
    private ShipYard? ShipYardDetails { get; set; }
    private IEnumerable<ShipType>? Ships { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (WaypointString is not null)
        {
            this.Waypoint = Location.CreateFromWaypoint(WaypointString);
            ShipYardDetails = await ShipYardApiService.GetShipYard(this.Waypoint);
            Ships = ShipYardDetails.Ships;
        }
    }

    private async void BuyShip(ShipType ship)
    {
        await ShipYardApiService.BuyShip(this.Waypoint, ship);
    }

}