@using SpaceTraders.Core
@using SpaceTraders.Api
@using SpaceTraders.Api.Shipyards
@inject ShipYardApiService ShipYardApiService;

@if (SystemSymbol is not null)
{
    <MudDataGrid T="Ship" Items="@Ships" SortMode="SortMode.Multiple" Filterable="true"
                 Style="margin-bottom: 20px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">ShipYard</MudText>
            <MudSpacer/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn T="ShipYardShip" TProperty="string" Property="ship => ship.Type.ToString()" Title="Ship Types"/>
            <PropertyColumn T="ShipYardShip" TProperty="int" Property="ship => ship.PurchasePrice"/>
            <TemplateColumn T="ShipYardShip" CellClass="d-flex" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudButton Variant="@Variant.Filled" Color="Color.Primary"
                                   OnClick="@(() => BuyShip(context.Item))">Buy</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
else
{
    <div>Empty waypoint was received</div>
}

@code {
    [Parameter]
    public string? SystemSymbol { get; set; }
    
    private Core.Location Waypoint { get; set; }
    private ShipYard? ShipYardDetails { get; set; }
    private IEnumerable<Ship>? Ships { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SystemSymbol is not null)
        {
            this.Waypoint = Core.Location.CreateFromWaypoint(SystemSymbol);
            ShipYardDetails = await ShipYardApiService.GetShipYard(this.Waypoint);
            Ships = ShipYardDetails.Ships;
        }
    }

    private async void BuyShip(ShipYardShip ship)
    {
        await ShipYardApiService.BuyShip(this.Waypoint, ship.Type);
    }

}