@using SpaceTraders.Pages.Location
@using SpaceTraders.Core
@using SpaceTraders.Pages.ConditionalIcons
@inject ShipApiService ShipApiService

<MudPaper Elevation="3" Class="ma-2 pa-10">
    <MudDataGrid Items="@NearbyLocations"
                 Filterable="false"
                 SortMode="SortMode.None"
                 Groupable="false">
        <Columns>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="l => l.Symbol.ToString()"/>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="l => l.Type.ToString()"/>
            <TemplateColumn T="LocationInfo" Title="Info">
                <CellTemplate>
                    <ConditionalIcons IconsToDisplay="BuildIconList(context.Item)"/>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="LocationInfo">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Color="Color.Primary" 
                                   Variant="Variant.Filled"
                                   OnClick="@(() => Navigate(context.Item.Symbol))">Navigate</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

@code {
    
    /*
     * Ship Yard: warehouse
     * market place: store front / store 
     * ship here: MyLocation / locationpin
     */

     [Parameter]
     public IEnumerable<LocationInfo> NearbyLocations { get; set; } = Enumerable.Empty<LocationInfo>();

    [Parameter]
    public Ship ActiveShip { get; set; } = default!;

    // public static IEnumerable<ConditionIcons> icons = new ConditionIcons[]
    // {
    //     new ConditionIcons(@Icons.Material.Filled.Warehouse, HasShipYard())
    // };

    private IEnumerable<Icon> BuildIconList(LocationInfo locationInfo)
    {
        return new Icon[]
        {
            new (Icons.Material.Filled.Rocket, HasShipYard(locationInfo)),
            new (Icons.Material.Filled.Storefront, HasMarketPlace(locationInfo)),
            new (Icons.Material.Filled.MyLocation, ShipHere(locationInfo))
        };
    }

    private async Task Navigate(Core.Location waypoint)
    {
        var response = await ShipApiService.Navigate(ActiveShip, waypoint);
    }
    
    private bool HasShipYard(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "SHIPYARD");
    }

    private bool HasMarketPlace(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "MARKETPLACE");
    }
    
    private bool ShipHere(LocationInfo location)
    {
        return this.ActiveShip.NavigationInfo.WaypointSymbol.ToString() == location.Symbol.ToString();
    }
}