@using SpaceTraders.Pages.Location
@using SpaceTraders.Core
@inject ShipApiService ShipApiService

<MudPaper Elevation="3" Class="ma-2 pa-10">
    <MudDataGrid Items="@NearbyLocations"
                 Filterable="false"
                 SortMode="SortMode.None"
                 Groupable="false">
        <Columns>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="l => l.Symbol.ToString()"/>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="l => l.Type.ToString()"/>
            <PropertyColumn T="LocationInfo" TProperty="bool" Property="l => HasShipYard(l)" Title="Ship Yard" />
            <PropertyColumn T="LocationInfo" TProperty="bool" Property="l => HasMarketPlace(l)" Title="Market Place" />
            <TemplateColumn T="LocationInfo">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Color="Color.Primary" 
                                   Variant="Variant.Filled"
                                   OnClick="@(() => Navigate(context.Item.Symbol))">Navigate</MudButton>
                        <MudButton Color="Color.Primary" 
                                   Variant="Variant.Filled"
                                   OnClick="@(Dock)">Dock</MudButton>
                        <MudButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   OnClick="@(Orbit)">Orbit</MudButton>
                        <MudButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   OnClick="@(Refuel)">Refuel</MudButton>
                        <MudButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   OnClick="@(Extract)">Extract</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

@code {

     [Parameter]
     public IEnumerable<LocationInfo> NearbyLocations { get; set; } = Enumerable.Empty<LocationInfo>();

    [Parameter]
    public Ship ActiveShip { get; set; } = default!;

    private async Task Navigate(Core.Location waypoint)
    {
        var response = await ShipApiService.Navigate(ActiveShip, waypoint);
    }
    
    private async Task Dock()
    {
        var response = await ShipApiService.DockCurrent(ActiveShip);
    }
    
    private async Task Refuel()
    {
        var response = await ShipApiService.Refuel(ActiveShip);
    }

    private async Task Orbit()
    {
        var response = await ShipApiService.OrbitCurrent(ActiveShip);
    }

    private async Task Extract()
    {
        var response = await ShipApiService.ExtractOre(ActiveShip);
    }
    
    private bool HasShipYard(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "SHIPYARD");
    }

    private bool HasMarketPlace(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "MARKETPLACE");
    }

}