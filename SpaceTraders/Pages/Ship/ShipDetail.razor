@page "/ship-detail/{ShipSymbol}"
@using SpaceTraders.Core
@using SpaceTraders.Pages.Location
@using System.Globalization
@using SpaceTraders.Api.Locations
@using SpaceTraders.Api.Ships
@using SpaceTraders.Pages.ShipScripts
@inject ShipApiService ShipApiService
@inject LocationApiService LocationApiService
@inject ShipScriptService ShipScriptService

<MudPaper Elevation="3" Class="ma-2 pa-5">
    <MudText Typo="Typo.h5">@ShipSymbol</MudText>
    @if (CurrentShip is not null)
    {
        <MudText Typo="Typo.body2">@CurrentShip.Registration.Name</MudText>
    }
</MudPaper>

<MudDivider/>

<MudPaper Elevation="3" Class="ma-2 pa-10">
    @if (CurrentShip is null)
    {
        <MudText Typo="Typo.h1">Loading...</MudText>
    }
    else
    {
        <MudSelect T="string"
                   Label="Active Script" 
                   Variant="Variant.Filled"
                   SelectedValuesChanged="@(RegisterShipWithScript)"
                   @bind-Value="ActiveShipScript">
            <MudSelectItem Value="@(nameof(Idle))"/>
            <MudSelectItem Value="@(nameof(MineAndSell))"/>
            <MudSelectItem Value="@(nameof(SurveyBelt))"/>
            <MudSelectItem Value="@(nameof(AdvancedMineAndSell))"/>
        </MudSelect>

        <div style="margin-top: 10px">
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled"
                   OnClick="@(Dock)">Dock</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="@(Orbit)">Orbit</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="@(Refuel)">Refuel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="@(Extract)">Extract</MudButton>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       OnClick="@(Survey)">Survey</MudButton>
        </div>
        
        <MudDivider Style="margin-top: 10px; margin-bottom: 10px" />

        <MudText Typo="Typo.body1">Current System: @CurrentShip.NavigationInfo.SystemSymbol</MudText>
        <MudText Typo="Typo.body1">Current Waypoint: @CurrentShip.NavigationInfo.WaypointSymbol</MudText>
        <MudText Typo="Typo.body1">
            <MudList Dense>
                <MudListItem>Ship Cooldown: @(ShipCooldown?.Expiration?.ToString(CultureInfo.InvariantCulture) ?? "None")</MudListItem>
                @if (ShipCooldown is not null)
                {
                    <MudListItem>Cooldown Time Remaining: @(ShipCooldown.RemainingSeconds.ToString())</MudListItem>
                }
                <MudListItem>Ship Status: @(CurrentShip.NavigationInfo.Status.ToString())</MudListItem>
                <MudListItem>Ship Flight Mode: @(CurrentShip.NavigationInfo.FlightMode.ToString())</MudListItem>
                <MudListItem>Frame: @CurrentShip.Frame.Name</MudListItem>
                <MudListItem>Description: @CurrentShip.Frame.Description</MudListItem>
                <MudListItem>Module Slots: @CurrentShip.Frame.ModuleSlots</MudListItem>
                <MudListItem>Mounting Points: @CurrentShip.Frame.MountingPoints</MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.HealthAndSafety" Title="Condition">
                    <MudProgressLinear Style="width: 20%; height: 18px"
                                       Color="Color.Info" Size="Size.Large"
                                       Value="@CurrentShip.Frame.Condition" Max="100">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default">
                            @CurrentShip.Frame.Condition / 100
                        </MudText>
                    </MudProgressLinear>
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.LocalGasStation" Title="Fuel">
                    <MudProgressLinear Style="width: 20%; height: 18px"
                                       Color="Color.Info" Size="Size.Large"
                                       Value="@CurrentShip.Fuel.Current" Max="CurrentShip.Fuel.Capacity">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default">
                            @CurrentShip.Fuel.Current / @CurrentShip.Fuel.Capacity
                        </MudText>
                    </MudProgressLinear>
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Inventory" Title="Inventory">
                    <MudProgressLinear Style="width: 20%; height: 18px"
                                       Color="Color.Info" Size="Size.Large"
                                       Value="@CurrentShip.Cargo.TotalUnits" Max="CurrentShip.Cargo.Capacity">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default">
                            @CurrentShip.Cargo.TotalUnits / @CurrentShip.Cargo.Capacity
                        </MudText>
                    </MudProgressLinear>
                </MudListItem>
            </MudList>
        </MudText>
       
        <MudText Typo="Typo.h4">Inventory</MudText>
        <MudDataGrid Items="@CurrentShip.Cargo.InventoryItems">
            <Columns>
                <PropertyColumn T="InventoryItem" TProperty="string" Property="i => i.Name"/>
                <PropertyColumn T="InventoryItem" TProperty="string" Property="i => i.Quantity.ToString()" Title="Quantity"/>
                <TemplateColumn T="InventoryItem">
                    <CellTemplate>
                        <SellCargoSlider Item="context.Item" ActiveShip="CurrentShip"></SellCargoSlider>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
</MudPaper>

<MudText Typo="Typo.h3">Helm</MudText>
<ShipHelm ActiveShip="CurrentShip"
          NearbyLocations="NearbyLocations"></ShipHelm>

@code {

    [Parameter]
    public string ShipSymbol { get; set; } = default!;
    
    public Ship ActiveShip { get; set; } = default!;

    private string? ActiveShipScript { get; set; }

    private Ship? CurrentShip { get; set; }
    private ShipCooldown? ShipCooldown { get; set; }
    private IEnumerable<LocationInfo> NearbyLocations { get; set; } = Enumerable.Empty<LocationInfo>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateCurrentShipInfo();
        ActiveShip = CurrentShip;
    }

    private async Task UpdateCurrentShipInfo()
    {
        CurrentShip = await ShipApiService.GetShipDetail(ShipSymbol);
        ShipCooldown = await ShipApiService.GetShipCooldown(CurrentShip);
        ActiveShipScript = ShipScriptService.GetActiveScript(CurrentShip);
        RegisterShipWithScript(new[] { ActiveShipScript });
        NearbyLocations = await LocationApiService.GetSystemInfo(CurrentShip.NavigationInfo.WaypointSymbol);
    }

    private void RegisterShipWithScript(IEnumerable<string> selectedValues)
    {
        if (CurrentShip is null) throw new NullReferenceException("Cannot Register Ship that is Null");
        ShipScriptService.RegisterShip(CurrentShip!, selectedValues.First());
    }
    
    private async Task Dock()
    {
        var response = await ShipApiService.DockCurrent(ActiveShip);
    }
    
    private async Task Refuel()
    {
        var response = await ShipApiService.Refuel(ActiveShip);
    }

    private async Task Orbit()
    {
        var response = await ShipApiService.OrbitCurrent(ActiveShip);
    }

    private async Task Extract()
    {
        var response = await ShipApiService.ExtractOre(ActiveShip);
    }
    
    private async Task Survey()
    {
        var response = await ShipApiService.Survey(ActiveShip);
    }


}