@page "/location-details/{SystemSymbol}"
@using SpaceTraders.Core
@using SpaceTraders.Pages.Ship
@using SpaceTraders.Algorithms
@using SpaceTraders.Api.Locations
@using SpaceTraders.Api.Ships
@using SpaceTraders.Pages.Market
@using SpaceTraders.Pages.ShipYard
@inject ShipApiService ShipApiService
@inject LocationApiService LocationApiService

<MudPaper Elevation="3" Class="ma-2 pa-10">
   <h4>
      @SystemSymbol
   </h4>
   
   @if (Market)
   {
      <Markets SystemSymbol="@SystemSymbol"/>
   }
   
   @if (ShipYard)
   {
      <ShipYards SystemSymbol="@SystemSymbol"/>
   }
   
   <MudDataGrid T="Survey" Items="Surveys">
      <ToolBarContent>
         <MudText Typo="Typo.h6">Surveys</MudText>
      </ToolBarContent>
      <Columns>
         <PropertyColumn T="Survey" TProperty="string" Property="s => s.Signature"/>
         <PropertyColumn T="Survey" TProperty="string" Property="s => s.Symbol"/>
         <PropertyColumn T="Survey" TProperty="string" Property="@(s => s.Expiration.ToLocalTime().ToString("g"))" Title="Expiration"/>
         <PropertyColumn T="Survey" TProperty="string" Property="s => s.Size"/>
         <PropertyColumn T="Survey" TProperty="string" Property="s => JoinOres(s.OreDeposits)" Title="Deposits"/>
         <PropertyColumn T="Survey" TProperty="string" Property="s => CalculateMarketWeight(s)" Title="Survey Weight"/>
      </Columns>
   </MudDataGrid>
</MudPaper>

@code {

   [Parameter]
   public string SystemSymbol { get; set; } = default!;

   [Parameter]
   [SupplyParameterFromQuery]
   public bool Market { get; set; }

   [Parameter]
   [SupplyParameterFromQuery]
   public bool ShipYard { get; set; }

   private SurveyMarketViabilityWeightCalculation _weightCalculation = new();

   private IEnumerable<Survey> Surveys { get; set; } = Enumerable.Empty<Survey>();
   private IEnumerable<MarketTradeGood> TradeGoods { get; set; } = Enumerable.Empty<MarketTradeGood>();

   protected override Task OnInitializedAsync()
   {
      Surveys = ShipApiService.Surveys.Where(s => s.Symbol == SystemSymbol);
      TradeGoods = LocationApiService.MarketTradeGoods ?? Enumerable.Empty<MarketTradeGood>();

      return base.OnInitializedAsync();
   }

   private string JoinOres(IEnumerable<Survey.OreDeposit> oreDeposits)
   {
      var strings = oreDeposits.Select(x => x.Deposit.ToString());
      return string.Join(",", strings);
   }

   private string CalculateMarketWeight(Survey survey)
   {
      if (!TradeGoods.Any()) return "?";
      return _weightCalculation.Calculate(survey, TradeGoods).Weight.ToString();
   }

}