@page "/locations"
@using SpaceTraders.Pages.Player
@using SpaceTraders.Pages.ConditionalIcons
@inject LocationApiService LocationApiService;
@inject PlayerApiService PlayerApiService;
@inject NavigationManager NavigationManager;

<MudPaper Elevation="3" Class="pa-10 ma-2">
    <MudDataGrid T="LocationInfo" Items="@LocationInfos" SortMode="SortMode.Multiple" Filterable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Locations: @Location.ToString()</MudText>
            <MudSpacer/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="info => info.Symbol.ToString()"/>
            <TemplateColumn T="LocationInfo" Title="Info">
                <CellTemplate>
                    <ConditionalIcons IconsToDisplay="@BuildIconList(context.Item)"/>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="info => info.Type.ToString()" Title="Type"/>
            <PropertyColumn T="LocationInfo" TProperty="string" Property="info => BuildCords(info)" Title="Cords" Filterable="false" Sortable="false"/>
            <TemplateColumn T="LocationInfo">
                <CellTemplate>
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               OnClick="@(() => NavigateToLocationDetails(context.Item))">
                        Details
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="LocationInfo"/>
        </PagerContent>
    </MudDataGrid>
</MudPaper>


@code {
    private IEnumerable<LocationInfo>? LocationInfos { get; set; }
    private Core.Location Location { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var playerInfo = await PlayerApiService.GetPlayer();
        Location = Core.Location.CreateFromWaypoint(playerInfo.Headquarters);
        LocationInfos = await LocationApiService.GetSystemInfo(Location);
    }
    
    private IEnumerable<Icon> BuildIconList(LocationInfo locationInfo)
    {
        return new Icon[]
        {
            new (Icons.Material.Filled.Rocket, HasShipYard(locationInfo), "Ship Yard"),
            new (Icons.Material.Filled.Storefront, HasMarketPlace(locationInfo), "Market Place"),
        };
    }
    private bool HasShipYard(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "SHIPYARD");
    }

    private bool HasMarketPlace(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "MARKETPLACE");
    }

    private string BuildCords(LocationInfo locationInfo)
    {
        return locationInfo.X + ", " + locationInfo.Y;
    }

    private void GoToShipYard(LocationInfo location)
    {
        if (HasShipYard(location))
        {
            NavigationManager.NavigateTo("/ShipYard/" + location.Symbol);
        }
    }

    private void GoToMarketPlace(LocationInfo location)
    {
        if (HasMarketPlace(location))
        {
            NavigationManager.NavigateTo("/Markets/" + location.Symbol);
        }
    }

    private void NavigateToLocationDetails(LocationInfo location)
    {
        NavigationManager.NavigateTo("/location-details/" + location.Symbol
            + "?" + "Market=" + this.HasMarketPlace(location) + "&" 
            + "ShipYard=" + this.HasShipYard(location));
    }

}