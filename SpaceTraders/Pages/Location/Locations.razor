@page "/locations"
@using SpaceTraders.Pages.Player
@inject LocationApiService LocationApiService;
@inject PlayerApiService PlayerApiService;
@inject NavigationManager NavigationManager;

<MudDataGrid T="LocationInfo" Items="@LocationInfos" SortMode="SortMode.Multiple" Filterable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Locations: @Location.ToString()</MudText>
        <MudSpacer/>
    </ToolBarContent>
    <Columns>
        <PropertyColumn T="LocationInfo" TProperty="string" Property="info => info.Symbol"/>
        @* <PropertyColumn T="LocationInfo" TProperty="bool" Property="info => HasShipYard(info)" Title="Ship Yard" /> *@
        <TemplateColumn Title="Ship Yard" T="LocationInfo">
            <CellTemplate>
                <MudText @onclick="@(() => GoToShipYard(context.Item))">@HasShipYard(context.Item)</MudText>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn T="LocationInfo" TProperty="bool" Property="info => HasMarketPlace(info)" Title="Market Place"/>
        <PropertyColumn T="LocationInfo" TProperty="string" Property="info => info.Type"/>
        <PropertyColumn T="LocationInfo" TProperty="string" Property="info => BuildCords(info)" Title="Cords" Filterable="false" Sortable="false"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="LocationInfo"/>
    </PagerContent>
</MudDataGrid>


@code {
    private IEnumerable<LocationInfo>? LocationInfos { get; set; }
    private Location Location { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var playerInfo = await PlayerApiService.GetPlayer();
        Location = Location.CreateFromWaypoint(playerInfo.Headquarters);
        LocationInfos = await LocationApiService.GetSystemInfo(Location);
    }

    private bool HasShipYard(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "SHIPYARD");
    }

    private bool HasMarketPlace(LocationInfo locationInfo)
    {
        return locationInfo.Traits.Any(x => x.Symbol == "MARKETPLACE");
    }

    private string BuildCords(LocationInfo locationInfo)
    {
        return locationInfo.X + ", " + locationInfo.Y;
    }

    private void GoToShipYard(LocationInfo location)
    {
        if (HasShipYard(location))
        {
            NavigationManager.NavigateTo("/ShipYard/" + location.Symbol);
        }
    }

}